// –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–∑ JSON –∏ localStorage
let projectsData = [];

async function loadProjectsData() {
    console.log('–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø—Ä–æ–µ–∫—Ç–æ–≤...');
    try {
        const savedProjects = localStorage.getItem('projects');
        if (savedProjects) {
            console.log('–ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–µ–∫—Ç—ã –≤ localStorage:', savedProjects);
            projectsData = JSON.parse(savedProjects);
        } else {
            console.log('localStorage –ø—É—Å—Ç, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ JSON...');
            const response = await fetch('projects.json');
            projectsData = await response.json();
            console.log('–ü—Ä–æ–µ–∫—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ JSON:', projectsData);
        }
        
        updateSlidesCount();
        generateProjectSlides();
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–µ–∫—Ç–æ–≤:', error);
        projectsData = [
            { id: 1, number: 1, title: "cafe-bot", url: "https://github.com/goddevils777/cafe-bot" },
            { id: 2, number: 2, title: "telegram-message-bot", url: "https://github.com/goddevils777/telegram-message-bot" }
        ];
        console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', projectsData);
        updateSlidesCount();
        generateProjectSlides();
    }
}

function reloadProjects() {
    console.log('–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã...');
    loadProjectsData();
}

window.addEventListener('storage', function(e) {
    if (e.key === 'projects') {
        console.log('–ü—Ä–æ–µ–∫—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ –∞–¥–º–∏–Ω–∫–µ, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º...');
        reloadProjects();
    }
});

function updateSlidesCount() {
    const totalSlides = 5 + projectsData.length + 1;
    window.totalSlides = totalSlides;
}

function generateProjectSlides() {
    console.log('=== –ü–û–õ–ù–ê–Ø –ü–ï–†–ï–°–¢–†–û–ô–ö–ê –°–õ–ê–ô–î–û–í ===');
    const sliderContainer = document.querySelector('.slider-container');
    
    if (!sliderContainer) {
        console.error('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–ª–∞–π–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω!');
        return;
    }
    
    sliderContainer.innerHTML = '';
    console.log('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –æ—á–∏—â–µ–Ω');
    
    const baseSlides = [
        `<div class="slide active" id="slide1">
            <div class="header">
                <span class="emoji">üòá</span>
                <span class="text">God & Devils</span>
                <span class="emoji">üòà</span>
            </div>
            <div class="main">
                <h1 class="hello-text">&lt;HELLO /&gt;</h1>
            </div>
        </div>`,
        
        `<div class="slide" id="slide2">
            <div class="header">
                <span class="emoji">üòá</span>
                <span class="text">God & Devils</span>
                <span class="emoji">üòà</span>
            </div>
            <div class="main">
                <h1 class="big-text">–†–ï–ê–õ–Ü–ó–£–Æ –ë–£–î–¨-–Ø–ö–£&nbsp;–í–ê–®–£ –Ü–î–ï–Æ&nbsp;–í&nbsp;–ö–û–î–Ü</h1>
            </div>
        </div>`,
        
        `<div class="slide" id="slide3">
            <div class="header">
                <span class="emoji">üòá</span>
                <span class="text">God & Devils</span>
                <span class="emoji">üòà</span>
            </div>
            <div class="main">
                <h1 class="big-text">–°–¢–í–û–†–Æ–Æ&nbsp;–ë–ê–ì–ê–¢–û –§–£–ù–ö–¶–Ü–û–ù–ê–õ–¨–ù–Ü WEB&#8209;–°–ï–†–í–Ü–°–ò</h1>
            </div>
        </div>`,
        
        `<div class="slide" id="slide4">
            <div class="header">
                <span class="emoji">üòá</span>
                <span class="text">God & Devils</span>
                <span class="emoji">üòà</span>
            </div>
            <div class="main skills-main">
                <div class="skills-content-wrapper">
                    <h1 class="skills-title">–ë–ê–ó–û–í–Ü –Ü–ù–°–¢–†–£–ú–ï–ù–¢–ò</h1>
                    <div class="skills-grid">
                        <div class="skill-column">
                            <h3>Backend:</h3>
                            <p>Python<br>Flask<br>Node.js<br>Express.js<br>Telegram API<br>Session Management<br>ngrok</p>
                        </div>
                        <div class="skill-column">
                            <h3>Frontend:</h3>
                            <p>HTML5<br>CSS3<br>Vanilla JavaScript<br>Fetch API</p>
                            <h3>–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:</h3>
                            <p>SQLite<br>LocalStorage<br>File Storage</p>
                        </div>
                        <div class="skill-column">
                            <h3>–î–µ–ø–ª–æ–π:</h3>
                            <p>ngrok<br>Local Development<br>File System<br>–õ—é–±–æ–π –¥—Ä—É–≥–æ–π —Å–µ—Ä–≤–µ—Ä</p>
                            <h3>API:</h3>
                            <p>Telegram API<br>–õ—é–±–æ–µ –¥—Ä—É–≥–æ–µ API</p>
                        </div>
                        <div class="skill-column">
                            <h3>–ë—ñ–±–ª—ñ–æ—Ç–µ–∫–∏:</h3>
                            <p>requests<br>sqlite3<br>telegram (gramJS)<br>@google/generative-ai<br>node-telegram-bot-api<br>input<br>hashlib<br>hmac<br>time<br>urllib<br>datetime<br>re<br>os<br>sys</p>
                        </div>
                        <div class="skill-column">
                            <h3>–§–æ—Ä–º–∞—Ç–∏:</h3>
                            <p>UTF-8<br>ISO<br>JSON<br>StringSession</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>`,
        
        `<div class="slide" id="slide5">
            <div class="header">
                <span class="emoji">üòá</span>
                <span class="text">God & Devils</span>
                <span class="emoji">üòà</span>
            </div>
            <div class="main">
                <h1 class="big-text">–ú–û–á&nbsp;–ü–†–û–ï–ö–¢–ò –°–ö–ê–ñ–£–¢–¨&nbsp;–°–ê–ú–Ü –ó–ê&nbsp;–ú–ï–ù–ï</h1>
            </div>
        </div>`
    ];
    
    baseSlides.forEach(slideHTML => {
        sliderContainer.innerHTML += slideHTML;
    });
    console.log('–ë–∞–∑–æ–≤—ã–µ —Å–ª–∞–π–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã: 5');
    
    projectsData.forEach((project, index) => {
        const slideNumber = 6 + index;
        const projectSlideHTML = `
            <div class="slide" id="slide${slideNumber}">
                <div class="header">
                    <span class="emoji">üòá</span>
                    <span class="text">God & Devils</span>
                    <span class="emoji">üòà</span>
                </div>
                <div class="main project-content">
                    <div class="project-number">#${project.number}</div>
                    <div class="project-info">
                        <p class="project-description">–£—Å—ñ –ø–æ–¥—Ä–æ–±–∏—Ü—ñ —Ç–∞ –∫–æ–¥ —Ç—É—Ç:</p>
                        <a href="${project.url}" class="project-link" target="_blank">
                            ${project.url}
                        </a>
                    </div>
                </div>
            </div>
        `;
        sliderContainer.innerHTML += projectSlideHTML;
        console.log(`–ü—Ä–æ–µ–∫—Ç ${project.title} –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ —Å–ª–∞–π–¥ ${slideNumber}`);
    });
    
    const finalSlideNumber = 6 + projectsData.length;
    const finalSlideHTML = `
        <div class="slide" id="slide${finalSlideNumber}">
            <div class="header">
                <span class="emoji">üòá</span>
                <span class="text">God & Devils</span>
                <span class="emoji">üòà</span>
            </div>
            <div class="main">
                <h1 class="hello-text">&lt;GOODBYE /&gt;</h1>
            </div>
        </div>
    `;
    sliderContainer.innerHTML += finalSlideHTML;
    console.log(`–§–∏–Ω–∞–ª—å–Ω—ã–π —Å–ª–∞–π–¥ –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ —Å–ª–∞–π–¥ ${finalSlideNumber}`);
    
    totalSlides = 5 + projectsData.length + 1;
    slides = document.querySelectorAll('.slide');
    
    console.log('=== –†–ï–ó–£–õ–¨–¢–ê–¢ ===');
    console.log('–í—Å–µ–≥–æ —Å–ª–∞–π–¥–æ–≤:', totalSlides);
    console.log('DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤:', slides.length);
    
    if (slides.length > 0) {
        showSlide(0);
    }
}

let currentSlide = 0;
let totalSlides = 6;
let slides = document.querySelectorAll('.slide');

function showSlide(index) {
    if (!slides || slides.length === 0) {
        console.log('–°–ª–∞–π–¥—ã –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
        return;
    }
    
    slides.forEach(slide => {
        slide.classList.remove('active', 'prev');
    });
    
    if (slides[index]) {
        slides[index].classList.add('active');
    }
    
    if (index > 0 && slides[index - 1]) {
        slides[index - 1].classList.add('prev');
    }
    
    updateNavigationButtons();
}

function nextSlide() {
    currentSlide = (currentSlide + 1) % totalSlides;
    showSlide(currentSlide);
}

function prevSlide() {
    currentSlide = (currentSlide - 1 + totalSlides) % totalSlides;
    showSlide(currentSlide);
}

function updateNavigationButtons() {
    const prevContainer = document.querySelector('.prev-container');
    const nextContainer = document.querySelector('.next-container');
    
    if (!prevContainer || !nextContainer) {
        console.log('–ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        return;
    }
    
    if (currentSlide > 0) {
        prevContainer.classList.add('show');
    } else {
        prevContainer.classList.remove('show');
    }
    
    if (currentSlide >= totalSlides - 1) {
        nextContainer.style.opacity = '0.5';
    } else {
        nextContainer.style.opacity = '1';
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π
let startX = 0;
let startY = 0;
let isSwiping = false;

document.addEventListener('touchstart', function(e) {
    if (e.touches.length === 1) {
        startX = e.touches[0].clientX;
        startY = e.touches[0].clientY;
        isSwiping = false;
    }
}, { passive: true });

document.addEventListener('touchmove', function(e) {
    if (e.touches.length === 1 && startX && startY) {
        let currentX = e.touches[0].clientX;
        let currentY = e.touches[0].clientY;
        
        let diffX = Math.abs(startX - currentX);
        let diffY = Math.abs(startY - currentY);
        
        if (diffX > diffY && diffX > 30) {
            isSwiping = true;
            e.preventDefault();
        }
    }
}, { passive: false });

document.addEventListener('touchend', function(e) {
    if (!startX || !startY || !isSwiping) return;
    
    let endX = e.changedTouches[0].clientX;
    let diffX = startX - endX;
    
    if (Math.abs(diffX) > 50) {
        if (diffX > 0) {
            nextSlide();
        } else {
            prevSlide();
        }
    }
    
    startX = 0;
    startY = 0;
    isSwiping = false;
}, { passive: true });

let isScrolling = false;
let scrollTimeout;

document.addEventListener('wheel', function(e) {
    if (isScrolling) return;
    
    if (Math.abs(e.deltaX) > Math.abs(e.deltaY) && Math.abs(e.deltaX) > 40) {
        e.preventDefault();
        isScrolling = true;
        
        if (e.deltaX > 0) {
            nextSlide();
        } else {
            prevSlide();
        }
        
        clearTimeout(scrollTimeout);
        scrollTimeout = setTimeout(() => {
            isScrolling = false;
        }, 1000);
    }
}, { passive: false });

let mouseStartX = 0;

document.addEventListener('mousedown', function(e) {
    mouseStartX = e.clientX;
});

document.addEventListener('mouseup', function(e) {
    let mouseEndX = e.clientX;
    let diffX = mouseStartX - mouseEndX;
    
    if (diffX > 50) {
        nextSlide();
    } else if (diffX < -50) {
        prevSlide();
    }
});

// –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ–Ω —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ –∫–æ–¥–∞
const codeElementsArray = [
    "</>", "<div>", "</div>", "<script>", "</script>", "@app", ".JSON", 
    "const", "let", "var", "function", "return", "if", "else", "try", "catch",
    "{}", "[]", "()", "=>", "&&", "||", "==", "!=", "++", "--",
    "async", "await", "fetch", "API", "JSON", "HTML", "CSS", "JS",
    "import", "export", "class", "extends", "super", "this", "new",
    "for", "while", "switch", "case", "break", "continue",
    "true", "false", "null", "undefined", "NaN", "Infinity"
];

const emojisArray = ["üòá", "üòà", "üíª", "‚ö°", "üî•", "‚ú®", "üöÄ", "üíØ", "üéØ", "üåü"];

function createCodeElement() {
    const background = document.getElementById("codeBackground");
    if (!background) {
        return;
    }
    
    const element = document.createElement("div");
    element.className = "code-element";
    
    const isEmoji = Math.random() < 0.3;
    
    if (isEmoji) {
        element.textContent = emojisArray[Math.floor(Math.random() * emojisArray.length)];
        element.classList.add("emoji");
    } else {
        element.textContent = codeElementsArray[Math.floor(Math.random() * codeElementsArray.length)];
        
        const sizes = ["small", "medium", "large"];
        element.classList.add(sizes[Math.floor(Math.random() * sizes.length)]);
    }
    
    const bounceAnimations = ["bounce-left", "bounce-right", "bounce-center"];
    const randomBounce = bounceAnimations[Math.floor(Math.random() * bounceAnimations.length)];
    
    element.style.left = Math.random() * 80 + 10 + "%";
    
    background.appendChild(element);
    
    requestAnimationFrame(function() {
        element.classList.add("animate", randomBounce);
    });
    
    // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –æ–Ω–∏ —Ç–æ—á–Ω–æ —É—à–ª–∏ –∑–∞ –∫—Ä–∞–π
    setTimeout(function() {
        if (element.parentNode) {
            element.parentNode.removeChild(element);
        }
    }, 12000); // –£–≤–µ–ª–∏—á–∏–ª –≤—Ä–µ–º—è, —á—Ç–æ–±—ã –¥–∞—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è
}

function startCodeAnimation() {
    setTimeout(function() {
        // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
        for (let i = 0; i < 3; i++) {
            setTimeout(createCodeElement, i * 1000);
        }
        
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ–∑–¥–∞–≤–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã
        setInterval(createCodeElement, 2000);
    }, 500);
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', async function() {
    // –£–±—Ä–∞–ª console.log
    await loadProjectsData();
    
    // –£–±—Ä–∞–ª console.log
    startCodeAnimation();
});

loadProjectsData();
startCodeAnimation();

function startCodeAnimation() {
    console.log("–ó–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–∏ —Ñ–æ–Ω–∞...");
    
    // –°–æ–∑–¥–∞–µ–º –º–µ–Ω—å—à–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å—Ä–∞–∑—É
    for (let i = 0; i < 5; i++) {
        setTimeout(createCodeElement, i * 800);
    }
    
    // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —Ä–µ–∂–µ
    setInterval(createCodeElement, 1500); // –ë—ã–ª–æ 500, —Å—Ç–∞–ª–æ 1500
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', async function() {
    console.log('–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã...');
    await loadProjectsData();
    console.log('–ü—Ä–æ–µ–∫—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã:', projectsData);
    
    console.log("DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é...");
    startCodeAnimation();
});

loadProjectsData();
startCodeAnimation();
